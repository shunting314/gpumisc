#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @softmax_kernel_0d1d2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1024xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %arg2 : i32
    %2 = tt.addptr %arg0, %1 : !tt.ptr<f32>, i32
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %4 = tt.splat %2 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %5 = tt.addptr %4, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    %6 = tt.splat %arg2 : (i32) -> tensor<1024xi32, #blocked>
    %7 = "triton_gpu.cmpi"(%3, %6) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %8 = tt.load %5, %7, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked>
    %9 = "tt.reduce"(%8) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %19 = "triton_gpu.cmpf"(%arg3, %arg4) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %20 = arith.select %19, %arg3, %arg4 : f32
      tt.reduce.return %20 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %10 = tt.splat %9 : (f32) -> tensor<1024xf32, #blocked>
    %11 = arith.subf %8, %10 : tensor<1024xf32, #blocked>
    %12 = math.exp %11 : tensor<1024xf32, #blocked>
    %13 = "tt.reduce"(%12) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %19 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %19 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %14 = tt.splat %13 : (f32) -> tensor<1024xf32, #blocked>
    %15 = arith.divf %12, %14 : tensor<1024xf32, #blocked>
    %16 = tt.addptr %arg1, %1 : !tt.ptr<f32>, i32
    %17 = tt.splat %16 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %18 = tt.addptr %17, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %18, %15, %7 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf32, #blocked>
    tt.return
  }
}
