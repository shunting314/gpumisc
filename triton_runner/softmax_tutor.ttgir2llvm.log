// -----// IR Dump After TritonGPUCoalesce (tritongpu-coalesce) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @softmax_kernel_0d1d2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1024xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %arg2 : i32
    %2 = tt.addptr %arg0, %1 : !tt.ptr<f32>, i32
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %4 = tt.splat %2 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %5 = tt.addptr %4, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    %6 = tt.splat %arg2 : (i32) -> tensor<1024xi32, #blocked>
    %7 = "triton_gpu.cmpi"(%3, %6) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %8 = triton_gpu.convert_layout %5 : (tensor<1024x!tt.ptr<f32>, #blocked>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %9 = triton_gpu.convert_layout %7 : (tensor<1024xi1, #blocked>) -> tensor<1024xi1, #blocked>
    %10 = triton_gpu.convert_layout %cst : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked>
    %11 = tt.load %8, %9, %10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked>
    %12 = "tt.reduce"(%11) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %25 = "triton_gpu.cmpf"(%arg3, %arg4) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %26 = arith.select %25, %arg3, %arg4 : f32
      tt.reduce.return %26 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %13 = tt.splat %12 : (f32) -> tensor<1024xf32, #blocked>
    %14 = arith.subf %11, %13 : tensor<1024xf32, #blocked>
    %15 = math.exp %14 : tensor<1024xf32, #blocked>
    %16 = "tt.reduce"(%15) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %25 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %25 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %17 = tt.splat %16 : (f32) -> tensor<1024xf32, #blocked>
    %18 = arith.divf %15, %17 : tensor<1024xf32, #blocked>
    %19 = tt.addptr %arg1, %1 : !tt.ptr<f32>, i32
    %20 = tt.splat %19 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %21 = tt.addptr %20, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    %22 = triton_gpu.convert_layout %21 : (tensor<1024x!tt.ptr<f32>, #blocked>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %23 = triton_gpu.convert_layout %18 : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked>
    %24 = triton_gpu.convert_layout %7 : (tensor<1024xi1, #blocked>) -> tensor<1024xi1, #blocked>
    tt.store %22, %23, %24 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @softmax_kernel_0d1d2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1024xf32, #blocked>
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %arg2 : i32
    %2 = tt.addptr %arg0, %1 : !tt.ptr<f32>, i32
    %3 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked>
    %4 = tt.splat %2 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %5 = tt.addptr %4, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    %6 = tt.splat %arg2 : (i32) -> tensor<1024xi32, #blocked>
    %7 = "triton_gpu.cmpi"(%3, %6) <{predicate = 2 : i64}> : (tensor<1024xi32, #blocked>, tensor<1024xi32, #blocked>) -> tensor<1024xi1, #blocked>
    %8 = tt.load %5, %7, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<1024xf32, #blocked>
    %9 = "tt.reduce"(%8) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %19 = "triton_gpu.cmpf"(%arg3, %arg4) <{predicate = 2 : i64}> : (f32, f32) -> i1
      %20 = arith.select %19, %arg3, %arg4 : f32
      tt.reduce.return %20 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %10 = tt.splat %9 : (f32) -> tensor<1024xf32, #blocked>
    %11 = arith.subf %8, %10 : tensor<1024xf32, #blocked>
    %12 = math.exp %11 : tensor<1024xf32, #blocked>
    %13 = "tt.reduce"(%12) <{axis = 0 : i32}> ({
    ^bb0(%arg3: f32, %arg4: f32):
      %19 = arith.addf %arg3, %arg4 : f32
      tt.reduce.return %19 : f32
    }) : (tensor<1024xf32, #blocked>) -> f32
    %14 = tt.splat %13 : (f32) -> tensor<1024xf32, #blocked>
    %15 = arith.divf %12, %14 : tensor<1024xf32, #blocked>
    %16 = tt.addptr %arg1, %1 : !tt.ptr<f32>, i32
    %17 = tt.splat %16 : (!tt.ptr<f32>) -> tensor<1024x!tt.ptr<f32>, #blocked>
    %18 = tt.addptr %17, %3 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked>
    tt.store %18, %15, %7 {cache = 1 : i32, evict = 1 : i32} : tensor<1024xf32, #blocked>
    tt.return
  }
}


// -----// IR Dump After ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) //----- //
module attributes {"triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 512 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @softmax_kernel_0d1d2(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = [128 : i32], sym_visibility = "public"} {
    %0 = nvvm.read.ptx.sreg.tid.x : i32 // thread id
    %1 = llvm.mlir.constant(32 : i32) : i32
    %2 = llvm.urem %0, %1  : i32 // land id
    %3 = llvm.udiv %0, %1  : i32 // warp id
    %4 = llvm.mlir.constant(32 : i32) : i32
    %5 = llvm.urem %3, %4  : i32
    %6 = llvm.mlir.constant(1024 : i32) : i32
    %7 = llvm.urem %2, %6  : i32
    %8 = llvm.mlir.constant(32 : i32) : i32
    %9 = llvm.mlir.constant(1 : i32) : i32
    %10 = llvm.mul %5, %8  : i32
    %11 = llvm.add %7, %10  : i32
    %12 = llvm.mul %9, %11  : i32
    %13 = llvm.mlir.constant(0 : i32) : i32
    %14 = llvm.add %12, %13  : i32
    %15 = llvm.mlir.constant(128 : i32) : i32
    %16 = llvm.add %12, %15  : i32
    %17 = llvm.mlir.constant(256 : i32) : i32
    %18 = llvm.add %12, %17  : i32
    %19 = llvm.mlir.constant(384 : i32) : i32
    %20 = llvm.add %12, %19  : i32
    %21 = llvm.mlir.constant(512 : i32) : i32
    %22 = llvm.add %12, %21  : i32
    %23 = llvm.mlir.constant(640 : i32) : i32
    %24 = llvm.add %12, %23  : i32
    %25 = llvm.mlir.constant(768 : i32) : i32
    %26 = llvm.add %12, %25  : i32
    %27 = llvm.mlir.constant(896 : i32) : i32
    %28 = llvm.add %12, %27  : i32
    %29 = nvvm.read.ptx.sreg.tid.x : i32
    %30 = llvm.mlir.constant(32 : i32) : i32
    %31 = llvm.urem %29, %30  : i32
    %32 = llvm.udiv %29, %30  : i32
    %33 = llvm.mlir.constant(32 : i32) : i32
    %34 = llvm.urem %32, %33  : i32
    %35 = llvm.mlir.constant(1024 : i32) : i32
    %36 = llvm.urem %31, %35  : i32
    %37 = llvm.mlir.constant(32 : i32) : i32
    %38 = llvm.mlir.constant(1 : i32) : i32
    %39 = llvm.mul %34, %37  : i32
    %40 = llvm.add %36, %39  : i32
    %41 = llvm.mul %38, %40  : i32
    %42 = llvm.mlir.constant(0 : i32) : i32
    %43 = llvm.add %41, %42  : i32
    %44 = llvm.mlir.constant(128 : i32) : i32
    %45 = llvm.add %41, %44  : i32
    %46 = llvm.mlir.constant(256 : i32) : i32
    %47 = llvm.add %41, %46  : i32
    %48 = llvm.mlir.constant(384 : i32) : i32
    %49 = llvm.add %41, %48  : i32
    %50 = llvm.mlir.constant(512 : i32) : i32
    %51 = llvm.add %41, %50  : i32
    %52 = llvm.mlir.constant(640 : i32) : i32
    %53 = llvm.add %41, %52  : i32
    %54 = llvm.mlir.constant(768 : i32) : i32
    %55 = llvm.add %41, %54  : i32
    %56 = llvm.mlir.constant(896 : i32) : i32
    %57 = llvm.add %41, %56  : i32
    %58 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %59 = llvm.bitcast %58 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %60 = builtin.unrealized_conversion_cast %arg1 : !llvm.ptr<f32, 1> to !tt.ptr<f32>
    %61 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<f32, 1> to !tt.ptr<f32>
    %62 = llvm.mlir.constant(0xFF800000 : f32) : f32 // -inf
    %63 = llvm.bitcast %62 : f32 to f32 // -inf
    %64 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %65 = llvm.insertvalue %63, %64[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %66 = llvm.insertvalue %63, %65[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %67 = llvm.insertvalue %63, %66[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %68 = llvm.insertvalue %63, %67[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %69 = llvm.insertvalue %63, %68[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %70 = llvm.insertvalue %63, %69[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %71 = llvm.insertvalue %63, %70[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %72 = llvm.insertvalue %63, %71[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %73 = nvvm.read.ptx.sreg.ctaid.x : i32 // block id
    %74 = llvm.mul %73, %arg2  : i32 // block id x XBLOCK
    %75 = llvm.getelementptr %arg0[%74] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> // xptr
    %76 = llvm.mlir.constant(0 : index) : i32

    %77 = llvm.add %14, %76  : i32 // gen 8 index
    %78 = llvm.add %16, %76  : i32
    %79 = llvm.add %18, %76  : i32
    %80 = llvm.add %20, %76  : i32
    %81 = llvm.add %22, %76  : i32
    %82 = llvm.add %24, %76  : i32
    %83 = llvm.add %26, %76  : i32
    %84 = llvm.add %28, %76  : i32
    %85 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> // pack the 8 indices to a struct
    %86 = llvm.insertvalue %77, %85[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %87 = llvm.insertvalue %78, %86[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %88 = llvm.insertvalue %79, %87[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %89 = llvm.insertvalue %80, %88[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %90 = llvm.insertvalue %81, %89[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %91 = llvm.insertvalue %82, %90[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %92 = llvm.insertvalue %83, %91[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %93 = llvm.insertvalue %84, %92[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %94 = llvm.bitcast %75 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1> // xptr
    %95 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> // broadcast xptr to a struct
    %96 = llvm.insertvalue %94, %95[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %97 = llvm.insertvalue %94, %96[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %98 = llvm.insertvalue %94, %97[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %99 = llvm.insertvalue %94, %98[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %100 = llvm.insertvalue %94, %99[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %101 = llvm.insertvalue %94, %100[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %102 = llvm.insertvalue %94, %101[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %103 = llvm.insertvalue %94, %102[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 

    %104 = llvm.extractvalue %103[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %105 = llvm.extractvalue %103[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %106 = llvm.extractvalue %103[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %107 = llvm.extractvalue %103[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %108 = llvm.extractvalue %103[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %109 = llvm.extractvalue %103[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %110 = llvm.extractvalue %103[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %111 = llvm.extractvalue %103[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %112 = llvm.extractvalue %93[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %113 = llvm.extractvalue %93[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %114 = llvm.extractvalue %93[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %115 = llvm.extractvalue %93[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %116 = llvm.extractvalue %93[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %117 = llvm.extractvalue %93[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %118 = llvm.extractvalue %93[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %119 = llvm.extractvalue %93[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %120 = llvm.getelementptr %104[%112] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %121 = llvm.getelementptr %105[%113] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %122 = llvm.getelementptr %106[%114] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %123 = llvm.getelementptr %107[%115] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %124 = llvm.getelementptr %108[%116] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %125 = llvm.getelementptr %109[%117] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %126 = llvm.getelementptr %110[%118] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %127 = llvm.getelementptr %111[%119] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %128 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %129 = llvm.insertvalue %120, %128[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %130 = llvm.insertvalue %121, %129[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %131 = llvm.insertvalue %122, %130[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %132 = llvm.insertvalue %123, %131[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %133 = llvm.insertvalue %124, %132[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %134 = llvm.insertvalue %125, %133[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %135 = llvm.insertvalue %126, %134[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %136 = llvm.insertvalue %127, %135[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %137 = llvm.bitcast %arg2 : i32 to i32
    %138 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %139 = llvm.insertvalue %137, %138[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %140 = llvm.insertvalue %137, %139[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %141 = llvm.insertvalue %137, %140[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %142 = llvm.insertvalue %137, %141[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %143 = llvm.insertvalue %137, %142[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %144 = llvm.insertvalue %137, %143[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %145 = llvm.insertvalue %137, %144[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %146 = llvm.insertvalue %137, %145[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %147 = llvm.extractvalue %93[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %148 = llvm.extractvalue %93[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %149 = llvm.extractvalue %93[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %150 = llvm.extractvalue %93[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %151 = llvm.extractvalue %93[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %152 = llvm.extractvalue %93[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %153 = llvm.extractvalue %93[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %154 = llvm.extractvalue %93[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %155 = llvm.extractvalue %146[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %156 = llvm.extractvalue %146[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %157 = llvm.extractvalue %146[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %158 = llvm.extractvalue %146[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %159 = llvm.extractvalue %146[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %160 = llvm.extractvalue %146[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %161 = llvm.extractvalue %146[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %162 = llvm.extractvalue %146[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %163 = llvm.icmp "slt" %147, %155 : i32
    %164 = llvm.icmp "slt" %148, %156 : i32
    %165 = llvm.icmp "slt" %149, %157 : i32
    %166 = llvm.icmp "slt" %150, %158 : i32
    %167 = llvm.icmp "slt" %151, %159 : i32
    %168 = llvm.icmp "slt" %152, %160 : i32
    %169 = llvm.icmp "slt" %153, %161 : i32
    %170 = llvm.icmp "slt" %154, %162 : i32
    %171 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>
    %172 = llvm.insertvalue %163, %171[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %173 = llvm.insertvalue %164, %172[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %174 = llvm.insertvalue %165, %173[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %175 = llvm.insertvalue %166, %174[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %176 = llvm.insertvalue %167, %175[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %177 = llvm.insertvalue %168, %176[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %178 = llvm.insertvalue %169, %177[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %179 = llvm.insertvalue %170, %178[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %180 = llvm.extractvalue %136[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %181 = llvm.extractvalue %136[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %182 = llvm.extractvalue %136[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %183 = llvm.extractvalue %136[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %184 = llvm.extractvalue %136[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %185 = llvm.extractvalue %136[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %186 = llvm.extractvalue %136[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %187 = llvm.extractvalue %136[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %188 = llvm.extractvalue %179[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %189 = llvm.extractvalue %179[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %190 = llvm.extractvalue %179[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %191 = llvm.extractvalue %179[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %192 = llvm.extractvalue %179[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %193 = llvm.extractvalue %179[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %194 = llvm.extractvalue %179[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %195 = llvm.extractvalue %179[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %196 = llvm.extractvalue %72[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %197 = llvm.extractvalue %72[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %198 = llvm.extractvalue %72[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %199 = llvm.extractvalue %72[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %200 = llvm.extractvalue %72[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %201 = llvm.extractvalue %72[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %202 = llvm.extractvalue %72[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %203 = llvm.extractvalue %72[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %204 = llvm.mlir.undef : vector<1xf32>
    %205 = llvm.mlir.constant(0 : index) : i32
    %206 = llvm.insertelement %196, %204[%205 : i32] : vector<1xf32>
    %207 = llvm.bitcast %206 : vector<1xf32> to i32
    %208 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %180, %188, %207, %188 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %209 = llvm.bitcast %208 : i32 to vector<1xf32>
    %210 = llvm.mlir.constant(0 : index) : i32
    %211 = llvm.extractelement %209[%210 : i32] : vector<1xf32>
    %212 = llvm.mlir.undef : vector<1xf32>
    %213 = llvm.mlir.constant(0 : index) : i32
    %214 = llvm.insertelement %197, %212[%213 : i32] : vector<1xf32>
    %215 = llvm.bitcast %214 : vector<1xf32> to i32
    %216 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %181, %189, %215, %189 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %217 = llvm.bitcast %216 : i32 to vector<1xf32>
    %218 = llvm.mlir.constant(0 : index) : i32
    %219 = llvm.extractelement %217[%218 : i32] : vector<1xf32>
    %220 = llvm.mlir.undef : vector<1xf32>
    %221 = llvm.mlir.constant(0 : index) : i32
    %222 = llvm.insertelement %198, %220[%221 : i32] : vector<1xf32>
    %223 = llvm.bitcast %222 : vector<1xf32> to i32
    %224 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %182, %190, %223, %190 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %225 = llvm.bitcast %224 : i32 to vector<1xf32>
    %226 = llvm.mlir.constant(0 : index) : i32
    %227 = llvm.extractelement %225[%226 : i32] : vector<1xf32>
    %228 = llvm.mlir.undef : vector<1xf32>
    %229 = llvm.mlir.constant(0 : index) : i32
    %230 = llvm.insertelement %199, %228[%229 : i32] : vector<1xf32>
    %231 = llvm.bitcast %230 : vector<1xf32> to i32
    %232 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %183, %191, %231, %191 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %233 = llvm.bitcast %232 : i32 to vector<1xf32>
    %234 = llvm.mlir.constant(0 : index) : i32
    %235 = llvm.extractelement %233[%234 : i32] : vector<1xf32>
    %236 = llvm.mlir.undef : vector<1xf32>
    %237 = llvm.mlir.constant(0 : index) : i32
    %238 = llvm.insertelement %200, %236[%237 : i32] : vector<1xf32>
    %239 = llvm.bitcast %238 : vector<1xf32> to i32
    %240 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %184, %192, %239, %192 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %241 = llvm.bitcast %240 : i32 to vector<1xf32>
    %242 = llvm.mlir.constant(0 : index) : i32
    %243 = llvm.extractelement %241[%242 : i32] : vector<1xf32>
    %244 = llvm.mlir.undef : vector<1xf32>
    %245 = llvm.mlir.constant(0 : index) : i32
    %246 = llvm.insertelement %201, %244[%245 : i32] : vector<1xf32>
    %247 = llvm.bitcast %246 : vector<1xf32> to i32
    %248 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %185, %193, %247, %193 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %249 = llvm.bitcast %248 : i32 to vector<1xf32>
    %250 = llvm.mlir.constant(0 : index) : i32
    %251 = llvm.extractelement %249[%250 : i32] : vector<1xf32>
    %252 = llvm.mlir.undef : vector<1xf32>
    %253 = llvm.mlir.constant(0 : index) : i32
    %254 = llvm.insertelement %202, %252[%253 : i32] : vector<1xf32>
    %255 = llvm.bitcast %254 : vector<1xf32> to i32
    %256 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %186, %194, %255, %194 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %257 = llvm.bitcast %256 : i32 to vector<1xf32>
    %258 = llvm.mlir.constant(0 : index) : i32
    %259 = llvm.extractelement %257[%258 : i32] : vector<1xf32>
    %260 = llvm.mlir.undef : vector<1xf32>
    %261 = llvm.mlir.constant(0 : index) : i32
    %262 = llvm.insertelement %203, %260[%261 : i32] : vector<1xf32>
    %263 = llvm.bitcast %262 : vector<1xf32> to i32
    %264 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %187, %195, %263, %195 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %265 = llvm.bitcast %264 : i32 to vector<1xf32>
    %266 = llvm.mlir.constant(0 : index) : i32
    %267 = llvm.extractelement %265[%266 : i32] : vector<1xf32>
    %268 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %269 = llvm.insertvalue %211, %268[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %270 = llvm.insertvalue %219, %269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %271 = llvm.insertvalue %227, %270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %272 = llvm.insertvalue %235, %271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %273 = llvm.insertvalue %243, %272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %274 = llvm.insertvalue %251, %273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %275 = llvm.insertvalue %259, %274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %276 = llvm.insertvalue %267, %275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %277 = llvm.mlir.constant(0 : i32) : i32
    %278 = llvm.getelementptr %59[%277] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %279 = llvm.bitcast %278 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %280 = llvm.extractvalue %276[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %281 = llvm.extractvalue %276[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %282 = llvm.extractvalue %276[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %283 = llvm.extractvalue %276[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %284 = llvm.extractvalue %276[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %285 = llvm.extractvalue %276[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %286 = llvm.extractvalue %276[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %287 = llvm.extractvalue %276[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %288 = llvm.fcmp "ogt" %280, %281 : f32
    %289 = llvm.select %288, %280, %281 : i1, f32
    %290 = llvm.fcmp "ogt" %289, %282 : f32
    %291 = llvm.select %290, %289, %282 : i1, f32
    %292 = llvm.fcmp "ogt" %291, %283 : f32
    %293 = llvm.select %292, %291, %283 : i1, f32
    %294 = llvm.fcmp "ogt" %293, %284 : f32
    %295 = llvm.select %294, %293, %284 : i1, f32
    %296 = llvm.fcmp "ogt" %295, %285 : f32
    %297 = llvm.select %296, %295, %285 : i1, f32
    %298 = llvm.fcmp "ogt" %297, %286 : f32
    %299 = llvm.select %298, %297, %286 : i1, f32
    %300 = llvm.fcmp "ogt" %299, %287 : f32
    %301 = llvm.select %300, %299, %287 : i1, f32
    %302 = nvvm.read.ptx.sreg.tid.x : i32
    %303 = llvm.mlir.constant(32 : i32) : i32
    %304 = llvm.udiv %302, %303  : i32
    %305 = llvm.urem %302, %303  : i32
    %306 = llvm.mlir.constant(0 : i32) : i32
    %307 = llvm.icmp "eq" %305, %306 : i32
    %308 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %301 : (f32) -> f32
    %309 = llvm.fcmp "ogt" %301, %308 : f32
    %310 = llvm.select %309, %301, %308 : i1, f32
    %311 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %310 : (f32) -> f32
    %312 = llvm.fcmp "ogt" %310, %311 : f32
    %313 = llvm.select %312, %310, %311 : i1, f32
    %314 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %313 : (f32) -> f32
    %315 = llvm.fcmp "ogt" %313, %314 : f32
    %316 = llvm.select %315, %313, %314 : i1, f32
    %317 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %316 : (f32) -> f32
    %318 = llvm.fcmp "ogt" %316, %317 : f32
    %319 = llvm.select %318, %316, %317 : i1, f32
    %320 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %319 : (f32) -> f32
    %321 = llvm.fcmp "ogt" %319, %320 : f32
    %322 = llvm.select %321, %319, %320 : i1, f32
    %323 = llvm.mlir.constant(0 : i32) : i32
    %324 = llvm.getelementptr %279[%304] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %325 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %324, %322, %307 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %326 = llvm.getelementptr %279[%302] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %327 = llvm.load %326 : !llvm.ptr<f32, 3>
    %328 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %327 : (f32) -> f32
    %329 = llvm.fcmp "ogt" %327, %328 : f32
    %330 = llvm.select %329, %327, %328 : i1, f32
    %331 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %330 : (f32) -> f32
    %332 = llvm.fcmp "ogt" %330, %331 : f32
    %333 = llvm.select %332, %330, %331 : i1, f32
    %334 = llvm.getelementptr %279[%302] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %335 = llvm.mlir.constant(4 : i32) : i32
    %336 = llvm.icmp "slt" %302, %335 : i32
    %337 = llvm.mlir.constant(4 : i32) : i32
    %338 = llvm.urem %305, %337  : i32
    %339 = llvm.icmp "eq" %338, %306 : i32
    %340 = llvm.and %336, %339  : i1
    %341 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %334, %333, %340 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %342 = llvm.load %279 : !llvm.ptr<f32, 3>
    %343 = llvm.bitcast %342 : f32 to f32
    %344 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %345 = llvm.insertvalue %343, %344[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %346 = llvm.insertvalue %343, %345[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %347 = llvm.insertvalue %343, %346[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %348 = llvm.insertvalue %343, %347[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %349 = llvm.insertvalue %343, %348[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %350 = llvm.insertvalue %343, %349[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %351 = llvm.insertvalue %343, %350[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %352 = llvm.insertvalue %343, %351[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %353 = llvm.extractvalue %276[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %354 = llvm.extractvalue %276[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %355 = llvm.extractvalue %276[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %356 = llvm.extractvalue %276[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %357 = llvm.extractvalue %276[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %358 = llvm.extractvalue %276[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %359 = llvm.extractvalue %276[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %360 = llvm.extractvalue %276[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %361 = llvm.extractvalue %352[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %362 = llvm.extractvalue %352[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %363 = llvm.extractvalue %352[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %364 = llvm.extractvalue %352[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %365 = llvm.extractvalue %352[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %366 = llvm.extractvalue %352[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %367 = llvm.extractvalue %352[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %368 = llvm.extractvalue %352[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %369 = llvm.fsub %353, %361  : f32
    %370 = llvm.fsub %354, %362  : f32
    %371 = llvm.fsub %355, %363  : f32
    %372 = llvm.fsub %356, %364  : f32
    %373 = llvm.fsub %357, %365  : f32
    %374 = llvm.fsub %358, %366  : f32
    %375 = llvm.fsub %359, %367  : f32
    %376 = llvm.fsub %360, %368  : f32
    %377 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %378 = llvm.insertvalue %369, %377[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %379 = llvm.insertvalue %370, %378[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %380 = llvm.insertvalue %371, %379[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %381 = llvm.insertvalue %372, %380[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %382 = llvm.insertvalue %373, %381[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %383 = llvm.insertvalue %374, %382[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %384 = llvm.insertvalue %375, %383[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %385 = llvm.insertvalue %376, %384[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %386 = llvm.extractvalue %385[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %387 = llvm.extractvalue %385[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %388 = llvm.extractvalue %385[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %389 = llvm.extractvalue %385[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %390 = llvm.extractvalue %385[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %391 = llvm.extractvalue %385[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %392 = llvm.extractvalue %385[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %393 = llvm.extractvalue %385[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %394 = llvm.mlir.constant(1.44269502 : f32) : f32
    %395 = llvm.fmul %386, %394  : f32
    %396 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %395 : (f32) -> f32
    %397 = llvm.mlir.constant(1.44269502 : f32) : f32
    %398 = llvm.fmul %387, %397  : f32
    %399 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %398 : (f32) -> f32
    %400 = llvm.mlir.constant(1.44269502 : f32) : f32
    %401 = llvm.fmul %388, %400  : f32
    %402 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %401 : (f32) -> f32
    %403 = llvm.mlir.constant(1.44269502 : f32) : f32
    %404 = llvm.fmul %389, %403  : f32
    %405 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %404 : (f32) -> f32
    %406 = llvm.mlir.constant(1.44269502 : f32) : f32
    %407 = llvm.fmul %390, %406  : f32
    %408 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %407 : (f32) -> f32
    %409 = llvm.mlir.constant(1.44269502 : f32) : f32
    %410 = llvm.fmul %391, %409  : f32
    %411 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %410 : (f32) -> f32
    %412 = llvm.mlir.constant(1.44269502 : f32) : f32
    %413 = llvm.fmul %392, %412  : f32
    %414 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %413 : (f32) -> f32
    %415 = llvm.mlir.constant(1.44269502 : f32) : f32
    %416 = llvm.fmul %393, %415  : f32
    %417 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %416 : (f32) -> f32
    %418 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %419 = llvm.insertvalue %396, %418[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %420 = llvm.insertvalue %399, %419[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %421 = llvm.insertvalue %402, %420[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %422 = llvm.insertvalue %405, %421[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %423 = llvm.insertvalue %408, %422[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %424 = llvm.insertvalue %411, %423[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %425 = llvm.insertvalue %414, %424[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %426 = llvm.insertvalue %417, %425[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    nvvm.barrier0
    %427 = llvm.mlir.constant(0 : i32) : i32
    %428 = llvm.getelementptr %59[%427] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3>
    %429 = llvm.bitcast %428 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %430 = llvm.extractvalue %426[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %431 = llvm.extractvalue %426[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %432 = llvm.extractvalue %426[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %433 = llvm.extractvalue %426[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %434 = llvm.extractvalue %426[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %435 = llvm.extractvalue %426[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %436 = llvm.extractvalue %426[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %437 = llvm.extractvalue %426[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %438 = llvm.fadd %430, %431  : f32
    %439 = llvm.fadd %438, %432  : f32
    %440 = llvm.fadd %439, %433  : f32
    %441 = llvm.fadd %440, %434  : f32
    %442 = llvm.fadd %441, %435  : f32
    %443 = llvm.fadd %442, %436  : f32
    %444 = llvm.fadd %443, %437  : f32
    %445 = nvvm.read.ptx.sreg.tid.x : i32
    %446 = llvm.mlir.constant(32 : i32) : i32
    %447 = llvm.udiv %445, %446  : i32
    %448 = llvm.urem %445, %446  : i32
    %449 = llvm.mlir.constant(0 : i32) : i32
    %450 = llvm.icmp "eq" %448, %449 : i32
    %451 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %444 : (f32) -> f32
    %452 = llvm.fadd %444, %451  : f32
    %453 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %452 : (f32) -> f32
    %454 = llvm.fadd %452, %453  : f32
    %455 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %454 : (f32) -> f32
    %456 = llvm.fadd %454, %455  : f32
    %457 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %456 : (f32) -> f32
    %458 = llvm.fadd %456, %457  : f32
    %459 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %458 : (f32) -> f32
    %460 = llvm.fadd %458, %459  : f32
    %461 = llvm.mlir.constant(0 : i32) : i32
    %462 = llvm.getelementptr %429[%447] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %463 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %462, %460, %450 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %464 = llvm.getelementptr %429[%445] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %465 = llvm.load %464 : !llvm.ptr<f32, 3>
    %466 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %465 : (f32) -> f32
    %467 = llvm.fadd %465, %466  : f32
    %468 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %467 : (f32) -> f32
    %469 = llvm.fadd %467, %468  : f32
    %470 = llvm.getelementptr %429[%445] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %471 = llvm.mlir.constant(4 : i32) : i32
    %472 = llvm.icmp "slt" %445, %471 : i32
    %473 = llvm.mlir.constant(4 : i32) : i32
    %474 = llvm.urem %448, %473  : i32
    %475 = llvm.icmp "eq" %474, %449 : i32
    %476 = llvm.and %472, %475  : i1
    %477 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %470, %469, %476 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %478 = llvm.load %429 : !llvm.ptr<f32, 3>
    %479 = llvm.bitcast %478 : f32 to f32
    %480 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %481 = llvm.insertvalue %479, %480[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %482 = llvm.insertvalue %479, %481[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %483 = llvm.insertvalue %479, %482[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %484 = llvm.insertvalue %479, %483[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %485 = llvm.insertvalue %479, %484[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %486 = llvm.insertvalue %479, %485[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %487 = llvm.insertvalue %479, %486[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %488 = llvm.insertvalue %479, %487[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %489 = llvm.extractvalue %426[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %490 = llvm.extractvalue %426[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %491 = llvm.extractvalue %426[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %492 = llvm.extractvalue %426[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %493 = llvm.extractvalue %426[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %494 = llvm.extractvalue %426[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %495 = llvm.extractvalue %426[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %496 = llvm.extractvalue %426[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %497 = llvm.extractvalue %488[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %498 = llvm.extractvalue %488[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %499 = llvm.extractvalue %488[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %500 = llvm.extractvalue %488[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %501 = llvm.extractvalue %488[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %502 = llvm.extractvalue %488[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %503 = llvm.extractvalue %488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %504 = llvm.extractvalue %488[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %505 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %489, %497 : (f32, f32) -> f32
    %506 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %490, %498 : (f32, f32) -> f32
    %507 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %491, %499 : (f32, f32) -> f32
    %508 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %492, %500 : (f32, f32) -> f32
    %509 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %493, %501 : (f32, f32) -> f32
    %510 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %494, %502 : (f32, f32) -> f32
    %511 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %495, %503 : (f32, f32) -> f32
    %512 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %496, %504 : (f32, f32) -> f32
    %513 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %514 = llvm.insertvalue %505, %513[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %515 = llvm.insertvalue %506, %514[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %516 = llvm.insertvalue %507, %515[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %517 = llvm.insertvalue %508, %516[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %518 = llvm.insertvalue %509, %517[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %519 = llvm.insertvalue %510, %518[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %520 = llvm.insertvalue %511, %519[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %521 = llvm.insertvalue %512, %520[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %522 = llvm.getelementptr %arg1[%74] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %523 = llvm.bitcast %522 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1>
    %524 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %525 = llvm.insertvalue %523, %524[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %526 = llvm.insertvalue %523, %525[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %527 = llvm.insertvalue %523, %526[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %528 = llvm.insertvalue %523, %527[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %529 = llvm.insertvalue %523, %528[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %530 = llvm.insertvalue %523, %529[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %531 = llvm.insertvalue %523, %530[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %532 = llvm.insertvalue %523, %531[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %533 = llvm.extractvalue %532[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %534 = llvm.extractvalue %532[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %535 = llvm.extractvalue %532[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %536 = llvm.extractvalue %532[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %537 = llvm.extractvalue %532[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %538 = llvm.extractvalue %532[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %539 = llvm.extractvalue %532[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %540 = llvm.extractvalue %532[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %541 = llvm.extractvalue %93[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %542 = llvm.extractvalue %93[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %543 = llvm.extractvalue %93[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %544 = llvm.extractvalue %93[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %545 = llvm.extractvalue %93[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %546 = llvm.extractvalue %93[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %547 = llvm.extractvalue %93[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %548 = llvm.extractvalue %93[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %549 = llvm.getelementptr %533[%541] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %550 = llvm.getelementptr %534[%542] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %551 = llvm.getelementptr %535[%543] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %552 = llvm.getelementptr %536[%544] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %553 = llvm.getelementptr %537[%545] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %554 = llvm.getelementptr %538[%546] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %555 = llvm.getelementptr %539[%547] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %556 = llvm.getelementptr %540[%548] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %557 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>
    %558 = llvm.insertvalue %549, %557[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %559 = llvm.insertvalue %550, %558[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %560 = llvm.insertvalue %551, %559[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %561 = llvm.insertvalue %552, %560[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %562 = llvm.insertvalue %553, %561[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %563 = llvm.insertvalue %554, %562[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %564 = llvm.insertvalue %555, %563[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %565 = llvm.insertvalue %556, %564[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %566 = llvm.extractvalue %565[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %567 = llvm.extractvalue %565[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %568 = llvm.extractvalue %565[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %569 = llvm.extractvalue %565[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %570 = llvm.extractvalue %565[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %571 = llvm.extractvalue %565[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %572 = llvm.extractvalue %565[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %573 = llvm.extractvalue %565[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> 
    %574 = llvm.extractvalue %521[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %575 = llvm.extractvalue %521[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %576 = llvm.extractvalue %521[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %577 = llvm.extractvalue %521[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %578 = llvm.extractvalue %521[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %579 = llvm.extractvalue %521[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %580 = llvm.extractvalue %521[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %581 = llvm.extractvalue %521[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %582 = llvm.extractvalue %179[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %583 = llvm.extractvalue %179[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %584 = llvm.extractvalue %179[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %585 = llvm.extractvalue %179[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %586 = llvm.extractvalue %179[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %587 = llvm.extractvalue %179[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %588 = llvm.extractvalue %179[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %589 = llvm.extractvalue %179[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %590 = llvm.mlir.constant(true) : i1
    %591 = nvvm.read.ptx.sreg.tid.x : i32
    %592 = llvm.mlir.constant(32 : i32) : i32
    %593 = llvm.urem %591, %592  : i32
    %594 = llvm.udiv %591, %592  : i32
    %595 = llvm.mlir.undef : vector<1xf32>
    %596 = llvm.bitcast %574 : f32 to f32
    %597 = llvm.mlir.constant(0 : i32) : i32
    %598 = llvm.insertelement %596, %595[%597 : i32] : vector<1xf32>
    %599 = llvm.bitcast %598 : vector<1xf32> to i32
    %600 = llvm.and %590, %582  : i1
    %601 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %599, %566, %600 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %602 = llvm.mlir.undef : vector<1xf32>
    %603 = llvm.bitcast %575 : f32 to f32
    %604 = llvm.mlir.constant(0 : i32) : i32
    %605 = llvm.insertelement %603, %602[%604 : i32] : vector<1xf32>
    %606 = llvm.bitcast %605 : vector<1xf32> to i32
    %607 = llvm.and %590, %583  : i1
    %608 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %606, %567, %607 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %609 = llvm.mlir.undef : vector<1xf32>
    %610 = llvm.bitcast %576 : f32 to f32
    %611 = llvm.mlir.constant(0 : i32) : i32
    %612 = llvm.insertelement %610, %609[%611 : i32] : vector<1xf32>
    %613 = llvm.bitcast %612 : vector<1xf32> to i32
    %614 = llvm.and %590, %584  : i1
    %615 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %613, %568, %614 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %616 = llvm.mlir.undef : vector<1xf32>
    %617 = llvm.bitcast %577 : f32 to f32
    %618 = llvm.mlir.constant(0 : i32) : i32
    %619 = llvm.insertelement %617, %616[%618 : i32] : vector<1xf32>
    %620 = llvm.bitcast %619 : vector<1xf32> to i32
    %621 = llvm.and %590, %585  : i1
    %622 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %620, %569, %621 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %623 = llvm.mlir.undef : vector<1xf32>
    %624 = llvm.bitcast %578 : f32 to f32
    %625 = llvm.mlir.constant(0 : i32) : i32
    %626 = llvm.insertelement %624, %623[%625 : i32] : vector<1xf32>
    %627 = llvm.bitcast %626 : vector<1xf32> to i32
    %628 = llvm.and %590, %586  : i1
    %629 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %627, %570, %628 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %630 = llvm.mlir.undef : vector<1xf32>
    %631 = llvm.bitcast %579 : f32 to f32
    %632 = llvm.mlir.constant(0 : i32) : i32
    %633 = llvm.insertelement %631, %630[%632 : i32] : vector<1xf32>
    %634 = llvm.bitcast %633 : vector<1xf32> to i32
    %635 = llvm.and %590, %587  : i1
    %636 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %634, %571, %635 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %637 = llvm.mlir.undef : vector<1xf32>
    %638 = llvm.bitcast %580 : f32 to f32
    %639 = llvm.mlir.constant(0 : i32) : i32
    %640 = llvm.insertelement %638, %637[%639 : i32] : vector<1xf32>
    %641 = llvm.bitcast %640 : vector<1xf32> to i32
    %642 = llvm.and %590, %588  : i1
    %643 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %641, %572, %642 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %644 = llvm.mlir.undef : vector<1xf32>
    %645 = llvm.bitcast %581 : f32 to f32
    %646 = llvm.mlir.constant(0 : i32) : i32
    %647 = llvm.insertelement %645, %644[%646 : i32] : vector<1xf32>
    %648 = llvm.bitcast %647 : vector<1xf32> to i32
    %649 = llvm.and %590, %589  : i1
    %650 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %648, %573, %649 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    llvm.return
  }
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {"triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 512 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @softmax_kernel_0d1d2(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = [128 : i32], sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2 = llvm.mlir.constant(4 : i32) : i32
    %3 = llvm.mlir.constant(0 : index) : i32
    %4 = llvm.mlir.constant(0xFF800000 : f32) : f32
    %5 = llvm.mlir.constant(896 : i32) : i32
    %6 = llvm.mlir.constant(768 : i32) : i32
    %7 = llvm.mlir.constant(640 : i32) : i32
    %8 = llvm.mlir.constant(512 : i32) : i32
    %9 = llvm.mlir.constant(384 : i32) : i32
    %10 = llvm.mlir.constant(256 : i32) : i32
    %11 = llvm.mlir.constant(128 : i32) : i32
    %12 = llvm.mlir.constant(0 : i32) : i32
    %13 = llvm.mlir.constant(1 : i32) : i32
    %14 = llvm.mlir.constant(1024 : i32) : i32
    %15 = llvm.mlir.constant(32 : i32) : i32
    %16 = nvvm.read.ptx.sreg.tid.x : i32
    %17 = llvm.urem %16, %15  : i32
    %18 = llvm.udiv %16, %15  : i32
    %19 = llvm.urem %18, %15  : i32
    %20 = llvm.urem %17, %14  : i32
    %21 = llvm.mul %19, %15  : i32
    %22 = llvm.add %20, %21  : i32
    %23 = llvm.mul %22, %13  : i32
    %24 = llvm.add %23, %12  : i32
    %25 = llvm.add %23, %11  : i32
    %26 = llvm.add %23, %10  : i32
    %27 = llvm.add %23, %9  : i32
    %28 = llvm.add %23, %8  : i32
    %29 = llvm.add %23, %7  : i32
    %30 = llvm.add %23, %6  : i32
    %31 = llvm.add %23, %5  : i32
    %32 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %33 = llvm.bitcast %32 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %34 = nvvm.read.ptx.sreg.ctaid.x : i32
    %35 = llvm.mul %34, %arg2  : i32
    %36 = llvm.getelementptr %arg0[%35] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %37 = llvm.add %24, %3  : i32
    %38 = llvm.add %25, %3  : i32
    %39 = llvm.add %26, %3  : i32
    %40 = llvm.add %27, %3  : i32
    %41 = llvm.add %28, %3  : i32
    %42 = llvm.add %29, %3  : i32
    %43 = llvm.add %30, %3  : i32
    %44 = llvm.add %31, %3  : i32
    %45 = llvm.getelementptr %36[%37] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %46 = llvm.getelementptr %36[%38] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %47 = llvm.getelementptr %36[%39] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %48 = llvm.getelementptr %36[%40] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %49 = llvm.getelementptr %36[%41] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %50 = llvm.getelementptr %36[%42] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %51 = llvm.getelementptr %36[%43] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %52 = llvm.getelementptr %36[%44] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %53 = llvm.icmp "slt" %37, %arg2 : i32
    %54 = llvm.icmp "slt" %38, %arg2 : i32
    %55 = llvm.icmp "slt" %39, %arg2 : i32
    %56 = llvm.icmp "slt" %40, %arg2 : i32
    %57 = llvm.icmp "slt" %41, %arg2 : i32
    %58 = llvm.icmp "slt" %42, %arg2 : i32
    %59 = llvm.icmp "slt" %43, %arg2 : i32
    %60 = llvm.icmp "slt" %44, %arg2 : i32
    %61 = llvm.mlir.undef : vector<1xf32>
    %62 = llvm.insertelement %4, %61[%3 : i32] : vector<1xf32>
    %63 = llvm.bitcast %62 : vector<1xf32> to i32
    %64 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %45, %53, %63, %53 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %65 = llvm.bitcast %64 : i32 to vector<1xf32>
    %66 = llvm.extractelement %65[%3 : i32] : vector<1xf32>
    %67 = llvm.mlir.undef : vector<1xf32>
    %68 = llvm.insertelement %4, %67[%3 : i32] : vector<1xf32>
    %69 = llvm.bitcast %68 : vector<1xf32> to i32
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %46, %54, %69, %54 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %71 = llvm.bitcast %70 : i32 to vector<1xf32>
    %72 = llvm.extractelement %71[%3 : i32] : vector<1xf32>
    %73 = llvm.mlir.undef : vector<1xf32>
    %74 = llvm.insertelement %4, %73[%3 : i32] : vector<1xf32>
    %75 = llvm.bitcast %74 : vector<1xf32> to i32
    %76 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %47, %55, %75, %55 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %77 = llvm.bitcast %76 : i32 to vector<1xf32>
    %78 = llvm.extractelement %77[%3 : i32] : vector<1xf32>
    %79 = llvm.mlir.undef : vector<1xf32>
    %80 = llvm.insertelement %4, %79[%3 : i32] : vector<1xf32>
    %81 = llvm.bitcast %80 : vector<1xf32> to i32
    %82 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %48, %56, %81, %56 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %83 = llvm.bitcast %82 : i32 to vector<1xf32>
    %84 = llvm.extractelement %83[%3 : i32] : vector<1xf32>
    %85 = llvm.mlir.undef : vector<1xf32>
    %86 = llvm.insertelement %4, %85[%3 : i32] : vector<1xf32>
    %87 = llvm.bitcast %86 : vector<1xf32> to i32
    %88 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %49, %57, %87, %57 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %89 = llvm.bitcast %88 : i32 to vector<1xf32>
    %90 = llvm.extractelement %89[%3 : i32] : vector<1xf32>
    %91 = llvm.mlir.undef : vector<1xf32>
    %92 = llvm.insertelement %4, %91[%3 : i32] : vector<1xf32>
    %93 = llvm.bitcast %92 : vector<1xf32> to i32
    %94 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %50, %58, %93, %58 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %95 = llvm.bitcast %94 : i32 to vector<1xf32>
    %96 = llvm.extractelement %95[%3 : i32] : vector<1xf32>
    %97 = llvm.mlir.undef : vector<1xf32>
    %98 = llvm.insertelement %4, %97[%3 : i32] : vector<1xf32>
    %99 = llvm.bitcast %98 : vector<1xf32> to i32
    %100 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %51, %59, %99, %59 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %101 = llvm.bitcast %100 : i32 to vector<1xf32>
    %102 = llvm.extractelement %101[%3 : i32] : vector<1xf32>
    %103 = llvm.mlir.undef : vector<1xf32>
    %104 = llvm.insertelement %4, %103[%3 : i32] : vector<1xf32>
    %105 = llvm.bitcast %104 : vector<1xf32> to i32
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %52, %60, %105, %60 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %107 = llvm.bitcast %106 : i32 to vector<1xf32>
    %108 = llvm.extractelement %107[%3 : i32] : vector<1xf32>
    %109 = llvm.bitcast %33 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %110 = llvm.fcmp "ogt" %66, %72 : f32
    %111 = llvm.select %110, %66, %72 : i1, f32
    %112 = llvm.fcmp "ogt" %111, %78 : f32
    %113 = llvm.select %112, %111, %78 : i1, f32
    %114 = llvm.fcmp "ogt" %113, %84 : f32
    %115 = llvm.select %114, %113, %84 : i1, f32
    %116 = llvm.fcmp "ogt" %115, %90 : f32
    %117 = llvm.select %116, %115, %90 : i1, f32
    %118 = llvm.fcmp "ogt" %117, %96 : f32
    %119 = llvm.select %118, %117, %96 : i1, f32
    %120 = llvm.fcmp "ogt" %119, %102 : f32
    %121 = llvm.select %120, %119, %102 : i1, f32
    %122 = llvm.fcmp "ogt" %121, %108 : f32
    %123 = llvm.select %122, %121, %108 : i1, f32
    %124 = nvvm.read.ptx.sreg.tid.x : i32
    %125 = llvm.udiv %124, %15  : i32
    %126 = llvm.urem %124, %15  : i32
    %127 = llvm.icmp "eq" %126, %12 : i32
    %128 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %123 : (f32) -> f32
    %129 = llvm.fcmp "ogt" %123, %128 : f32
    %130 = llvm.select %129, %123, %128 : i1, f32
    %131 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %130 : (f32) -> f32
    %132 = llvm.fcmp "ogt" %130, %131 : f32
    %133 = llvm.select %132, %130, %131 : i1, f32
    %134 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %133 : (f32) -> f32
    %135 = llvm.fcmp "ogt" %133, %134 : f32
    %136 = llvm.select %135, %133, %134 : i1, f32
    %137 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %136 : (f32) -> f32
    %138 = llvm.fcmp "ogt" %136, %137 : f32
    %139 = llvm.select %138, %136, %137 : i1, f32
    %140 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %139 : (f32) -> f32
    %141 = llvm.fcmp "ogt" %139, %140 : f32
    %142 = llvm.select %141, %139, %140 : i1, f32
    %143 = llvm.getelementptr %109[%125] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %144 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %143, %142, %127 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %145 = llvm.getelementptr %109[%124] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %146 = llvm.load %145 : !llvm.ptr<f32, 3>
    %147 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %146 : (f32) -> f32
    %148 = llvm.fcmp "ogt" %146, %147 : f32
    %149 = llvm.select %148, %146, %147 : i1, f32
    %150 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %149 : (f32) -> f32
    %151 = llvm.fcmp "ogt" %149, %150 : f32
    %152 = llvm.select %151, %149, %150 : i1, f32
    %153 = llvm.getelementptr %109[%124] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %154 = llvm.icmp "slt" %124, %2 : i32
    %155 = llvm.urem %126, %2  : i32
    %156 = llvm.icmp "eq" %155, %12 : i32
    %157 = llvm.and %154, %156  : i1
    %158 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %153, %152, %157 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %159 = llvm.load %109 : !llvm.ptr<f32, 3>
    %160 = llvm.fsub %66, %159  : f32
    %161 = llvm.fsub %72, %159  : f32
    %162 = llvm.fsub %78, %159  : f32
    %163 = llvm.fsub %84, %159  : f32
    %164 = llvm.fsub %90, %159  : f32
    %165 = llvm.fsub %96, %159  : f32
    %166 = llvm.fsub %102, %159  : f32
    %167 = llvm.fsub %108, %159  : f32
    %168 = llvm.fmul %160, %1  : f32
    %169 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %168 : (f32) -> f32
    %170 = llvm.fmul %161, %1  : f32
    %171 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %170 : (f32) -> f32
    %172 = llvm.fmul %162, %1  : f32
    %173 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %172 : (f32) -> f32
    %174 = llvm.fmul %163, %1  : f32
    %175 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %174 : (f32) -> f32
    %176 = llvm.fmul %164, %1  : f32
    %177 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %176 : (f32) -> f32
    %178 = llvm.fmul %165, %1  : f32
    %179 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %178 : (f32) -> f32
    %180 = llvm.fmul %166, %1  : f32
    %181 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %180 : (f32) -> f32
    %182 = llvm.fmul %167, %1  : f32
    %183 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %182 : (f32) -> f32
    nvvm.barrier0
    %184 = llvm.bitcast %33 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %185 = llvm.fadd %169, %171  : f32
    %186 = llvm.fadd %185, %173  : f32
    %187 = llvm.fadd %186, %175  : f32
    %188 = llvm.fadd %187, %177  : f32
    %189 = llvm.fadd %188, %179  : f32
    %190 = llvm.fadd %189, %181  : f32
    %191 = llvm.fadd %190, %183  : f32
    %192 = nvvm.read.ptx.sreg.tid.x : i32
    %193 = llvm.udiv %192, %15  : i32
    %194 = llvm.urem %192, %15  : i32
    %195 = llvm.icmp "eq" %194, %12 : i32
    %196 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %191 : (f32) -> f32
    %197 = llvm.fadd %191, %196  : f32
    %198 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %197 : (f32) -> f32
    %199 = llvm.fadd %197, %198  : f32
    %200 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %199 : (f32) -> f32
    %201 = llvm.fadd %199, %200  : f32
    %202 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %201 : (f32) -> f32
    %203 = llvm.fadd %201, %202  : f32
    %204 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %203 : (f32) -> f32
    %205 = llvm.fadd %203, %204  : f32
    %206 = llvm.getelementptr %184[%193] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %207 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %206, %205, %195 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %208 = llvm.getelementptr %184[%192] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %209 = llvm.load %208 : !llvm.ptr<f32, 3>
    %210 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %209 : (f32) -> f32
    %211 = llvm.fadd %209, %210  : f32
    %212 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %211 : (f32) -> f32
    %213 = llvm.fadd %211, %212  : f32
    %214 = llvm.getelementptr %184[%192] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %215 = llvm.icmp "slt" %192, %2 : i32
    %216 = llvm.urem %194, %2  : i32
    %217 = llvm.icmp "eq" %216, %12 : i32
    %218 = llvm.and %215, %217  : i1
    %219 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %214, %213, %218 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %220 = llvm.load %184 : !llvm.ptr<f32, 3>
    %221 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %169, %220 : (f32, f32) -> f32
    %222 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %171, %220 : (f32, f32) -> f32
    %223 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %173, %220 : (f32, f32) -> f32
    %224 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %175, %220 : (f32, f32) -> f32
    %225 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %177, %220 : (f32, f32) -> f32
    %226 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %179, %220 : (f32, f32) -> f32
    %227 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %181, %220 : (f32, f32) -> f32
    %228 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %183, %220 : (f32, f32) -> f32
    %229 = llvm.getelementptr %arg1[%35] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %230 = llvm.getelementptr %229[%37] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %231 = llvm.getelementptr %229[%38] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %232 = llvm.getelementptr %229[%39] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %233 = llvm.getelementptr %229[%40] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %234 = llvm.getelementptr %229[%41] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %235 = llvm.getelementptr %229[%42] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %236 = llvm.getelementptr %229[%43] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %237 = llvm.getelementptr %229[%44] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %238 = llvm.mlir.undef : vector<1xf32>
    %239 = llvm.insertelement %221, %238[%12 : i32] : vector<1xf32>
    %240 = llvm.bitcast %239 : vector<1xf32> to i32
    %241 = llvm.and %0, %53  : i1
    %242 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %240, %230, %241 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %243 = llvm.mlir.undef : vector<1xf32>
    %244 = llvm.insertelement %222, %243[%12 : i32] : vector<1xf32>
    %245 = llvm.bitcast %244 : vector<1xf32> to i32
    %246 = llvm.and %0, %54  : i1
    %247 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %245, %231, %246 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %248 = llvm.mlir.undef : vector<1xf32>
    %249 = llvm.insertelement %223, %248[%12 : i32] : vector<1xf32>
    %250 = llvm.bitcast %249 : vector<1xf32> to i32
    %251 = llvm.and %0, %55  : i1
    %252 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %250, %232, %251 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %253 = llvm.mlir.undef : vector<1xf32>
    %254 = llvm.insertelement %224, %253[%12 : i32] : vector<1xf32>
    %255 = llvm.bitcast %254 : vector<1xf32> to i32
    %256 = llvm.and %0, %56  : i1
    %257 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %255, %233, %256 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %258 = llvm.mlir.undef : vector<1xf32>
    %259 = llvm.insertelement %225, %258[%12 : i32] : vector<1xf32>
    %260 = llvm.bitcast %259 : vector<1xf32> to i32
    %261 = llvm.and %0, %57  : i1
    %262 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %260, %234, %261 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %263 = llvm.mlir.undef : vector<1xf32>
    %264 = llvm.insertelement %226, %263[%12 : i32] : vector<1xf32>
    %265 = llvm.bitcast %264 : vector<1xf32> to i32
    %266 = llvm.and %0, %58  : i1
    %267 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %265, %235, %266 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %268 = llvm.mlir.undef : vector<1xf32>
    %269 = llvm.insertelement %227, %268[%12 : i32] : vector<1xf32>
    %270 = llvm.bitcast %269 : vector<1xf32> to i32
    %271 = llvm.and %0, %59  : i1
    %272 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %270, %236, %271 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %273 = llvm.mlir.undef : vector<1xf32>
    %274 = llvm.insertelement %228, %273[%12 : i32] : vector<1xf32>
    %275 = llvm.bitcast %274 : vector<1xf32> to i32
    %276 = llvm.and %0, %60  : i1
    %277 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %275, %237, %276 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    llvm.return
  }
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {"triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 512 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8>
  llvm.func @softmax_kernel_0d1d2(%arg0: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: i32) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = [128 : i32], sym_visibility = "public"} {
    %0 = llvm.mlir.constant(true) : i1
    %1 = llvm.mlir.constant(1.44269502 : f32) : f32
    %2 = llvm.mlir.constant(4 : i32) : i32
    %3 = llvm.mlir.constant(0 : index) : i32
    %4 = llvm.mlir.constant(0xFF800000 : f32) : f32
    %5 = llvm.mlir.constant(896 : i32) : i32
    %6 = llvm.mlir.constant(768 : i32) : i32
    %7 = llvm.mlir.constant(640 : i32) : i32
    %8 = llvm.mlir.constant(512 : i32) : i32
    %9 = llvm.mlir.constant(384 : i32) : i32
    %10 = llvm.mlir.constant(256 : i32) : i32
    %11 = llvm.mlir.constant(128 : i32) : i32
    %12 = llvm.mlir.constant(0 : i32) : i32
    %13 = llvm.mlir.constant(1 : i32) : i32
    %14 = llvm.mlir.constant(1024 : i32) : i32
    %15 = llvm.mlir.constant(32 : i32) : i32
    %16 = nvvm.read.ptx.sreg.tid.x : i32
    %17 = llvm.urem %16, %15  : i32
    %18 = llvm.udiv %16, %15  : i32
    %19 = llvm.urem %18, %15  : i32
    %20 = llvm.urem %17, %14  : i32
    %21 = llvm.mul %19, %15  : i32
    %22 = llvm.add %20, %21  : i32
    %23 = llvm.mul %22, %13  : i32
    %24 = llvm.add %23, %12  : i32
    %25 = llvm.add %23, %11  : i32
    %26 = llvm.add %23, %10  : i32
    %27 = llvm.add %23, %9  : i32
    %28 = llvm.add %23, %8  : i32
    %29 = llvm.add %23, %7  : i32
    %30 = llvm.add %23, %6  : i32
    %31 = llvm.add %23, %5  : i32
    %32 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3>
    %33 = llvm.bitcast %32 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3>
    %34 = nvvm.read.ptx.sreg.ctaid.x : i32
    %35 = llvm.mul %34, %arg2  : i32
    %36 = llvm.getelementptr %arg0[%35] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %37 = llvm.add %24, %3  : i32
    %38 = llvm.add %25, %3  : i32
    %39 = llvm.add %26, %3  : i32
    %40 = llvm.add %27, %3  : i32
    %41 = llvm.add %28, %3  : i32
    %42 = llvm.add %29, %3  : i32
    %43 = llvm.add %30, %3  : i32
    %44 = llvm.add %31, %3  : i32
    %45 = llvm.getelementptr %36[%37] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %46 = llvm.getelementptr %36[%38] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %47 = llvm.getelementptr %36[%39] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %48 = llvm.getelementptr %36[%40] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %49 = llvm.getelementptr %36[%41] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %50 = llvm.getelementptr %36[%42] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %51 = llvm.getelementptr %36[%43] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %52 = llvm.getelementptr %36[%44] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %53 = llvm.icmp "slt" %37, %arg2 : i32
    %54 = llvm.icmp "slt" %38, %arg2 : i32
    %55 = llvm.icmp "slt" %39, %arg2 : i32
    %56 = llvm.icmp "slt" %40, %arg2 : i32
    %57 = llvm.icmp "slt" %41, %arg2 : i32
    %58 = llvm.icmp "slt" %42, %arg2 : i32
    %59 = llvm.icmp "slt" %43, %arg2 : i32
    %60 = llvm.icmp "slt" %44, %arg2 : i32
    %61 = llvm.mlir.undef : vector<1xf32>
    %62 = llvm.insertelement %4, %61[%3 : i32] : vector<1xf32>
    %63 = llvm.bitcast %62 : vector<1xf32> to i32
    %64 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %45, %53, %63, %53 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %65 = llvm.bitcast %64 : i32 to vector<1xf32>
    %66 = llvm.extractelement %65[%3 : i32] : vector<1xf32>
    %67 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %46, %54, %63, %54 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %68 = llvm.bitcast %67 : i32 to vector<1xf32>
    %69 = llvm.extractelement %68[%3 : i32] : vector<1xf32>
    %70 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %47, %55, %63, %55 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %71 = llvm.bitcast %70 : i32 to vector<1xf32>
    %72 = llvm.extractelement %71[%3 : i32] : vector<1xf32>
    %73 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %48, %56, %63, %56 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %74 = llvm.bitcast %73 : i32 to vector<1xf32>
    %75 = llvm.extractelement %74[%3 : i32] : vector<1xf32>
    %76 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %49, %57, %63, %57 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %77 = llvm.bitcast %76 : i32 to vector<1xf32>
    %78 = llvm.extractelement %77[%3 : i32] : vector<1xf32>
    %79 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %50, %58, %63, %58 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %80 = llvm.bitcast %79 : i32 to vector<1xf32>
    %81 = llvm.extractelement %80[%3 : i32] : vector<1xf32>
    %82 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %51, %59, %63, %59 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %83 = llvm.bitcast %82 : i32 to vector<1xf32>
    %84 = llvm.extractelement %83[%3 : i32] : vector<1xf32>
    %85 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b" %52, %60, %63, %60 : (!llvm.ptr<f32, 1>, i1, i32, i1) -> i32
    %86 = llvm.bitcast %85 : i32 to vector<1xf32>
    %87 = llvm.extractelement %86[%3 : i32] : vector<1xf32>
    %88 = llvm.bitcast %33 : !llvm.ptr<i8, 3> to !llvm.ptr<f32, 3>
    %89 = llvm.fcmp "ogt" %66, %69 : f32
    %90 = llvm.select %89, %66, %69 : i1, f32
    %91 = llvm.fcmp "ogt" %90, %72 : f32
    %92 = llvm.select %91, %90, %72 : i1, f32
    %93 = llvm.fcmp "ogt" %92, %75 : f32
    %94 = llvm.select %93, %92, %75 : i1, f32
    %95 = llvm.fcmp "ogt" %94, %78 : f32
    %96 = llvm.select %95, %94, %78 : i1, f32
    %97 = llvm.fcmp "ogt" %96, %81 : f32
    %98 = llvm.select %97, %96, %81 : i1, f32
    %99 = llvm.fcmp "ogt" %98, %84 : f32
    %100 = llvm.select %99, %98, %84 : i1, f32
    %101 = llvm.fcmp "ogt" %100, %87 : f32
    %102 = llvm.select %101, %100, %87 : i1, f32
    %103 = llvm.icmp "eq" %17, %12 : i32
    %104 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %102 : (f32) -> f32
    %105 = llvm.fcmp "ogt" %102, %104 : f32
    %106 = llvm.select %105, %102, %104 : i1, f32
    %107 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %106 : (f32) -> f32
    %108 = llvm.fcmp "ogt" %106, %107 : f32
    %109 = llvm.select %108, %106, %107 : i1, f32
    %110 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %109 : (f32) -> f32
    %111 = llvm.fcmp "ogt" %109, %110 : f32
    %112 = llvm.select %111, %109, %110 : i1, f32
    %113 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %112 : (f32) -> f32
    %114 = llvm.fcmp "ogt" %112, %113 : f32
    %115 = llvm.select %114, %112, %113 : i1, f32
    %116 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %115 : (f32) -> f32
    %117 = llvm.fcmp "ogt" %115, %116 : f32
    %118 = llvm.select %117, %115, %116 : i1, f32
    %119 = llvm.getelementptr %88[%18] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %120 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %119, %118, %103 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %121 = llvm.getelementptr %88[%16] : (!llvm.ptr<f32, 3>, i32) -> !llvm.ptr<f32, 3>
    %122 = llvm.load %121 : !llvm.ptr<f32, 3>
    %123 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %122 : (f32) -> f32
    %124 = llvm.fcmp "ogt" %122, %123 : f32
    %125 = llvm.select %124, %122, %123 : i1, f32
    %126 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %125 : (f32) -> f32
    %127 = llvm.fcmp "ogt" %125, %126 : f32
    %128 = llvm.select %127, %125, %126 : i1, f32
    %129 = llvm.icmp "slt" %16, %2 : i32
    %130 = llvm.urem %17, %2  : i32
    %131 = llvm.icmp "eq" %130, %12 : i32
    %132 = llvm.and %129, %131  : i1
    %133 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %121, %128, %132 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %134 = llvm.load %88 : !llvm.ptr<f32, 3>
    %135 = llvm.fsub %66, %134  : f32
    %136 = llvm.fsub %69, %134  : f32
    %137 = llvm.fsub %72, %134  : f32
    %138 = llvm.fsub %75, %134  : f32
    %139 = llvm.fsub %78, %134  : f32
    %140 = llvm.fsub %81, %134  : f32
    %141 = llvm.fsub %84, %134  : f32
    %142 = llvm.fsub %87, %134  : f32
    %143 = llvm.fmul %135, %1  : f32
    %144 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %143 : (f32) -> f32
    %145 = llvm.fmul %136, %1  : f32
    %146 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %145 : (f32) -> f32
    %147 = llvm.fmul %137, %1  : f32
    %148 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %147 : (f32) -> f32
    %149 = llvm.fmul %138, %1  : f32
    %150 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %149 : (f32) -> f32
    %151 = llvm.fmul %139, %1  : f32
    %152 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %151 : (f32) -> f32
    %153 = llvm.fmul %140, %1  : f32
    %154 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %153 : (f32) -> f32
    %155 = llvm.fmul %141, %1  : f32
    %156 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %155 : (f32) -> f32
    %157 = llvm.fmul %142, %1  : f32
    %158 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %157 : (f32) -> f32
    nvvm.barrier0
    %159 = llvm.fadd %144, %146  : f32
    %160 = llvm.fadd %159, %148  : f32
    %161 = llvm.fadd %160, %150  : f32
    %162 = llvm.fadd %161, %152  : f32
    %163 = llvm.fadd %162, %154  : f32
    %164 = llvm.fadd %163, %156  : f32
    %165 = llvm.fadd %164, %158  : f32
    %166 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r" %165 : (f32) -> f32
    %167 = llvm.fadd %165, %166  : f32
    %168 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r" %167 : (f32) -> f32
    %169 = llvm.fadd %167, %168  : f32
    %170 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r" %169 : (f32) -> f32
    %171 = llvm.fadd %169, %170  : f32
    %172 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %171 : (f32) -> f32
    %173 = llvm.fadd %171, %172  : f32
    %174 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %173 : (f32) -> f32
    %175 = llvm.fadd %173, %174  : f32
    %176 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %119, %175, %103 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %177 = llvm.load %121 : !llvm.ptr<f32, 3>
    %178 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r" %177 : (f32) -> f32
    %179 = llvm.fadd %177, %178  : f32
    %180 = llvm.inline_asm asm_dialect = att operand_attrs = [] "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r" %179 : (f32) -> f32
    %181 = llvm.fadd %179, %180  : f32
    %182 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %121, %181, %132 : (!llvm.ptr<f32, 3>, f32, i1) -> !llvm.void
    nvvm.barrier0
    %183 = llvm.load %88 : !llvm.ptr<f32, 3>
    %184 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %144, %183 : (f32, f32) -> f32
    %185 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %146, %183 : (f32, f32) -> f32
    %186 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %148, %183 : (f32, f32) -> f32
    %187 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %150, %183 : (f32, f32) -> f32
    %188 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %152, %183 : (f32, f32) -> f32
    %189 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %154, %183 : (f32, f32) -> f32
    %190 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %156, %183 : (f32, f32) -> f32
    %191 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %158, %183 : (f32, f32) -> f32
    %192 = llvm.getelementptr %arg1[%35] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %193 = llvm.getelementptr %192[%37] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %194 = llvm.getelementptr %192[%38] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %195 = llvm.getelementptr %192[%39] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %196 = llvm.getelementptr %192[%40] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %197 = llvm.getelementptr %192[%41] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %198 = llvm.getelementptr %192[%42] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %199 = llvm.getelementptr %192[%43] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %200 = llvm.getelementptr %192[%44] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1>
    %201 = llvm.insertelement %184, %61[%12 : i32] : vector<1xf32>
    %202 = llvm.bitcast %201 : vector<1xf32> to i32
    %203 = llvm.and %0, %53  : i1
    %204 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %202, %193, %203 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %205 = llvm.insertelement %185, %61[%12 : i32] : vector<1xf32>
    %206 = llvm.bitcast %205 : vector<1xf32> to i32
    %207 = llvm.and %0, %54  : i1
    %208 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %206, %194, %207 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %209 = llvm.insertelement %186, %61[%12 : i32] : vector<1xf32>
    %210 = llvm.bitcast %209 : vector<1xf32> to i32
    %211 = llvm.and %0, %55  : i1
    %212 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %210, %195, %211 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %213 = llvm.insertelement %187, %61[%12 : i32] : vector<1xf32>
    %214 = llvm.bitcast %213 : vector<1xf32> to i32
    %215 = llvm.and %0, %56  : i1
    %216 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %214, %196, %215 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %217 = llvm.insertelement %188, %61[%12 : i32] : vector<1xf32>
    %218 = llvm.bitcast %217 : vector<1xf32> to i32
    %219 = llvm.and %0, %57  : i1
    %220 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %218, %197, %219 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %221 = llvm.insertelement %189, %61[%12 : i32] : vector<1xf32>
    %222 = llvm.bitcast %221 : vector<1xf32> to i32
    %223 = llvm.and %0, %58  : i1
    %224 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %222, %198, %223 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %225 = llvm.insertelement %190, %61[%12 : i32] : vector<1xf32>
    %226 = llvm.bitcast %225 : vector<1xf32> to i32
    %227 = llvm.and %0, %59  : i1
    %228 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %226, %199, %227 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    %229 = llvm.insertelement %191, %61[%12 : i32] : vector<1xf32>
    %230 = llvm.bitcast %229 : vector<1xf32> to i32
    %231 = llvm.and %0, %60  : i1
    %232 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %230, %200, %231 : (i32, !llvm.ptr<f32, 1>, i1) -> !llvm.void
    llvm.return
  }
}


.
----------------------------------------------------------------------
Ran 1 test in 0.114s

OK
expected sum 1823.0
actual sum 1823.0
