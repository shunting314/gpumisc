; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

define void @sumrow_kernel_0d1d23d(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %6 = lshr i32 %5, 6
  %7 = and i32 %6, 1
  %urem = shl i32 %5, 2
  %8 = and i32 %urem, 252
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %10 = shl i32 %9, 1
  %11 = or i32 %7, %10
  %12 = icmp slt i32 %11, 4
  %13 = shl i32 %11, 11
  %14 = or i32 %8, %13
  %15 = sext i32 %14 to i64
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15
  br i1 %12, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %4
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %18 = or i32 %8, %13
  %19 = or i32 %18, 256
  %20 = sext i32 %19 to i64
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %23 = or i32 %8, %13
  %24 = or i32 %23, 512
  %25 = sext i32 %24 to i64
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %28 = or i32 %8, %13
  %29 = or i32 %28, 768
  %30 = sext i32 %29 to i64
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %33 = or i32 %8, %13
  %34 = or i32 %33, 1024
  %35 = sext i32 %34 to i64
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %38 = or i32 %8, %13
  %39 = or i32 %38, 1280
  %40 = sext i32 %39 to i64
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %43 = or i32 %8, %13
  %44 = or i32 %43, 1536
  %45 = sext i32 %44 to i64
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  %48 = or i32 %8, %13
  %49 = or i32 %48, 1792
  %50 = sext i32 %49 to i64
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #2
  br label %.split2.us

.split.us.preheader:                              ; preds = %4
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3
  %58 = bitcast i32 %54 to float
  %59 = bitcast i32 %55 to float
  %60 = bitcast i32 %56 to float
  %61 = bitcast i32 %57 to float
  %62 = fadd float %58, 0.000000e+00
  %63 = fadd float %59, 0.000000e+00
  %64 = fadd float %60, 0.000000e+00
  %65 = fadd float %61, 0.000000e+00
  %66 = or i32 %8, %13
  %67 = or i32 %66, 256
  %68 = sext i32 %67 to i64
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3
  %75 = bitcast i32 %71 to float
  %76 = bitcast i32 %72 to float
  %77 = bitcast i32 %73 to float
  %78 = bitcast i32 %74 to float
  %79 = fadd float %62, %75
  %80 = fadd float %63, %76
  %81 = fadd float %64, %77
  %82 = fadd float %65, %78
  %83 = or i32 %8, %13
  %84 = or i32 %83, 512
  %85 = sext i32 %84 to i64
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3
  %92 = bitcast i32 %88 to float
  %93 = bitcast i32 %89 to float
  %94 = bitcast i32 %90 to float
  %95 = bitcast i32 %91 to float
  %96 = fadd float %79, %92
  %97 = fadd float %80, %93
  %98 = fadd float %81, %94
  %99 = fadd float %82, %95
  %100 = or i32 %8, %13
  %101 = or i32 %100, 768
  %102 = sext i32 %101 to i64
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3
  %109 = bitcast i32 %105 to float
  %110 = bitcast i32 %106 to float
  %111 = bitcast i32 %107 to float
  %112 = bitcast i32 %108 to float
  %113 = fadd float %96, %109
  %114 = fadd float %97, %110
  %115 = fadd float %98, %111
  %116 = fadd float %99, %112
  %117 = or i32 %8, %13
  %118 = or i32 %117, 1024
  %119 = sext i32 %118 to i64
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3
  %126 = bitcast i32 %122 to float
  %127 = bitcast i32 %123 to float
  %128 = bitcast i32 %124 to float
  %129 = bitcast i32 %125 to float
  %130 = fadd float %113, %126
  %131 = fadd float %114, %127
  %132 = fadd float %115, %128
  %133 = fadd float %116, %129
  %134 = or i32 %8, %13
  %135 = or i32 %134, 1280
  %136 = sext i32 %135 to i64
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3
  %143 = bitcast i32 %139 to float
  %144 = bitcast i32 %140 to float
  %145 = bitcast i32 %141 to float
  %146 = bitcast i32 %142 to float
  %147 = fadd float %130, %143
  %148 = fadd float %131, %144
  %149 = fadd float %132, %145
  %150 = fadd float %133, %146
  %151 = or i32 %8, %13
  %152 = or i32 %151, 1536
  %153 = sext i32 %152 to i64
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3
  %160 = bitcast i32 %156 to float
  %161 = bitcast i32 %157 to float
  %162 = bitcast i32 %158 to float
  %163 = bitcast i32 %159 to float
  %164 = fadd float %147, %160
  %165 = fadd float %148, %161
  %166 = fadd float %149, %162
  %167 = fadd float %150, %163
  %168 = or i32 %8, %13
  %169 = or i32 %168, 1792
  %170 = sext i32 %169 to i64
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #2
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3
  %177 = bitcast i32 %173 to float
  %178 = bitcast i32 %174 to float
  %179 = bitcast i32 %175 to float
  %180 = bitcast i32 %176 to float
  %181 = fadd float %164, %177
  %182 = fadd float %165, %178
  %183 = fadd float %166, %179
  %184 = fadd float %167, %180
  %185 = insertvalue { float, float, float, float } undef, float %181, 0
  %186 = insertvalue { float, float, float, float } %185, float %182, 1
  %187 = insertvalue { float, float, float, float } %186, float %183, 2
  %188 = insertvalue { float, float, float, float } %187, float %184, 3
  br label %.split2.us

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi { float, float, float, float } [ %188, %.split.us.preheader ], [ zeroinitializer, %.split.preheader ]
  %189 = and i32 %5, 1
  %190 = or i32 %10, %189
  %191 = icmp slt i32 %190, 4
  %192 = lshr i32 %5, 5
  %193 = and i32 %192, 1
  %194 = and i32 %5, 31
  %195 = extractvalue { float, float, float, float } %.us-phi, 0
  %196 = extractvalue { float, float, float, float } %.us-phi, 1
  %197 = extractvalue { float, float, float, float } %.us-phi, 2
  %198 = extractvalue { float, float, float, float } %.us-phi, 3
  %199 = fadd float %195, %196
  %200 = fadd float %197, %199
  %201 = fadd float %198, %200
  %202 = icmp eq i32 %194, 0
  %203 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r"(float %201) #2
  %204 = fadd float %201, %203
  %205 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r"(float %204) #2
  %206 = fadd float %204, %205
  %207 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r"(float %206) #2
  %208 = fadd float %206, %207
  %209 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r"(float %208) #2
  %210 = fadd float %208, %209
  %211 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %210) #2
  %212 = fadd float %210, %211
  %213 = shl nuw nsw i32 %7, 1
  %214 = or i32 %213, %193
  %215 = zext i32 %214 to i64
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i64 %215
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, float %212, i1 %202) #2
  tail call void @llvm.nvvm.barrier0()
  %217 = sext i32 %5 to i64
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217
  %219 = load float, ptr addrspace(3) %218, align 4
  %220 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %219) #2
  %221 = fadd float %219, %220
  %222 = icmp slt i32 %5, 4
  %223 = icmp eq i32 %189, 0
  %224 = and i1 %222, %223
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, float %221, i1 %224) #2
  tail call void @llvm.nvvm.barrier0()
  %225 = zext i32 %213 to i64
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225
  %227 = load float, ptr addrspace(3) %226, align 4
  tail call void @llvm.nvvm.barrier0()
  %228 = zext i32 %7 to i64
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i64 %228
  %230 = insertelement <1 x float> undef, float %227, i64 0
  store <1 x float> %230, ptr addrspace(3) %229, align 4
  tail call void @llvm.nvvm.barrier0()
  %231 = zext i32 %189 to i64
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i64 %231
  %233 = load i32, ptr addrspace(3) %232, align 4
  %234 = sext i32 %190 to i64
  %235 = getelementptr float, ptr addrspace(1) %1, i64 %234
  %236 = lshr i32 %194, 1
  %237 = shl nuw nsw i32 %192, 4
  %238 = or i32 %237, %236
  %239 = icmp eq i32 %238, 0
  %240 = and i1 %191, %239
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %233, ptr addrspace(1) %235, i1 %240) #2
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!nvvm.annotations = !{!0, !1, !1, !0}

!0 = !{ptr @sumrow_kernel_0d1d23d, !"kernel", i32 1}
!1 = !{ptr @sumrow_kernel_0d1d23d, !"maxntidx", i32 128}
