#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @sumrow_kernel_0d1d23d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32
    %c2048_i32 = arith.constant 2048 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<2048> : tensor<2x1xi32, #blocked>
    %cst_0 = arith.constant dense<2048> : tensor<1x256xi32, #blocked1>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<2x256xf32, #blocked>
    %cst_2 = arith.constant dense<4> : tensor<2x1xi32, #blocked>
    %c2_i32 = arith.constant 2 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c2_i32 : i32
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2>
    %3 = triton_gpu.convert_layout %2 : (tensor<2xi32, #blocked2>) -> tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
    %4 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<2x1xi32, #blocked3>
    %5 = triton_gpu.convert_layout %4 : (tensor<2x1xi32, #blocked3>) -> tensor<2x1xi32, #blocked>
    %6 = tt.splat %1 : (i32) -> tensor<2x1xi32, #blocked>
    %7 = arith.addi %6, %5 : tensor<2x1xi32, #blocked>
    %8 = "triton_gpu.cmpi"(%7, %cst_2) <{predicate = 2 : i64}> : (tensor<2x1xi32, #blocked>, tensor<2x1xi32, #blocked>) -> tensor<2x1xi1, #blocked>
    %9 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked2>
    %10 = triton_gpu.convert_layout %9 : (tensor<256xi32, #blocked2>) -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x256xi32, #blocked1>
    %12 = arith.muli %7, %cst : tensor<2x1xi32, #blocked>
    %13 = tt.broadcast %12 : (tensor<2x1xi32, #blocked>) -> tensor<2x256xi32, #blocked>
    %14 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<2x256x!tt.ptr<f32>, #blocked>
    %15 = tt.broadcast %8 : (tensor<2x1xi1, #blocked>) -> tensor<2x256xi1, #blocked>
    %16 = scf.for %arg4 = %c0_i32 to %c2048_i32 step %c256_i32 iter_args(%arg5 = %cst_1) -> (tensor<2x256xf32, #blocked>)  : i32 {
      %24 = tt.splat %arg4 : (i32) -> tensor<1x256xi32, #blocked1>
      %25 = arith.addi %24, %11 : tensor<1x256xi32, #blocked1>
      %26 = "triton_gpu.cmpi"(%25, %cst_0) <{predicate = 2 : i64}> : (tensor<1x256xi32, #blocked1>, tensor<1x256xi32, #blocked1>) -> tensor<1x256xi1, #blocked1>
      %27 = tt.broadcast %25 : (tensor<1x256xi32, #blocked1>) -> tensor<2x256xi32, #blocked1>
      %28 = triton_gpu.convert_layout %27 : (tensor<2x256xi32, #blocked1>) -> tensor<2x256xi32, #blocked>
      %29 = arith.addi %28, %13 : tensor<2x256xi32, #blocked>
      %30 = tt.addptr %14, %29 : tensor<2x256x!tt.ptr<f32>, #blocked>, tensor<2x256xi32, #blocked>
      %31 = tt.broadcast %26 : (tensor<1x256xi1, #blocked1>) -> tensor<2x256xi1, #blocked1>
      %32 = triton_gpu.convert_layout %31 : (tensor<2x256xi1, #blocked1>) -> tensor<2x256xi1, #blocked>
      %33 = arith.andi %32, %15 : tensor<2x256xi1, #blocked>
      %34 = tt.load %30, %33, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x256xf32, #blocked>
      %35 = arith.addf %arg5, %34 : tensor<2x256xf32, #blocked>
      %36 = "triton_gpu.select"(%33, %35, %arg5) : (tensor<2x256xi1, #blocked>, tensor<2x256xf32, #blocked>, tensor<2x256xf32, #blocked>) -> tensor<2x256xf32, #blocked>
      scf.yield %36 : tensor<2x256xf32, #blocked>
    }
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32, %arg5: f32):
      %24 = arith.addf %arg4, %arg5 : f32
      tt.reduce.return %24 : f32
    }) : (tensor<2x256xf32, #blocked>) -> tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %18 = triton_gpu.convert_layout %17 : (tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<2xf32, #blocked2>
    %19 = triton_gpu.convert_layout %18 : (tensor<2xf32, #blocked2>) -> tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
    %20 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<2xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<2x1xf32, #blocked3>
    %21 = triton_gpu.convert_layout %20 : (tensor<2x1xf32, #blocked3>) -> tensor<2x1xf32, #blocked>
    %22 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<2x1x!tt.ptr<f32>, #blocked>
    %23 = tt.addptr %22, %7 : tensor<2x1x!tt.ptr<f32>, #blocked>, tensor<2x1xi32, #blocked>
    tt.store %23, %21, %8 {cache = 1 : i32, evict = 1 : i32} : tensor<2x1xf32, #blocked>
    tt.return
  }
}
