module {
  tt.func public @sumrow_kernel_0d1d23d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32 // xnumel
    %c2048_i32 = arith.constant 2048 : i32 // rnumel
    %0 = tt.get_program_id x : i32
    %c2_i32 = arith.constant 2 : i32
    %1 = arith.muli %0, %c2_i32 : i32 // xoffset
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32>
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<2xi32>) -> tensor<2x1xi32>
    %4 = tt.splat %1 : (i32) -> tensor<2x1xi32>
    %5 = arith.addi %4, %3 : tensor<2x1xi32> // xindex
    %cst = arith.constant dense<4> : tensor<2x1xi32> // constant folded broadcast
    %6 = arith.cmpi slt, %5, %cst : tensor<2x1xi32> // xmask
    %7 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %8 = tt.expand_dims %7 {axis = 0 : i32} : (tensor<256xi32>) -> tensor<1x256xi32> // rbase
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<2x256xf32> // _tmp1
    %c0_i32 = arith.constant 0 : i32 // lb
    %c256_i32 = arith.constant 256 : i32 // step
    %9 = arith.bitcast %c0_i32 : i32 to i32 // lb
    %10 = arith.bitcast %c2048_i32 : i32 to i32 // ub
    %11 = arith.bitcast %c256_i32 : i32 to i32 // step
    %12 = llvm.mlir.undef : i32
    %13 = scf.for %arg4 = %9 to %10 step %11 iter_args(%arg5 = %cst_1) -> (tensor<2x256xf32>)  : i32 {
      %18 = tt.splat %arg4 : (i32) -> tensor<1x256xi32>
      %19 = arith.addi %18, %8 : tensor<1x256xi32> // rindex
      %cst_2 = arith.constant dense<2048> : tensor<1x256xi32>
      %20 = arith.cmpi slt, %19, %cst_2 : tensor<1x256xi32> // rmask
      %c2048_i32_3 = arith.constant 2048 : i32
      %cst_4 = arith.constant dense<2048> : tensor<2x1xi32>
      %21 = arith.muli %5, %cst_4 : tensor<2x1xi32>
      %22 = tt.broadcast %19 : (tensor<1x256xi32>) -> tensor<2x256xi32>
      %23 = tt.broadcast %21 : (tensor<2x1xi32>) -> tensor<2x256xi32>
      %24 = arith.addi %22, %23 : tensor<2x256xi32>
      %25 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<2x256x!tt.ptr<f32>>
      %26 = tt.addptr %25, %24 : tensor<2x256x!tt.ptr<f32>>, tensor<2x256xi32>
      %27 = tt.broadcast %20 : (tensor<1x256xi1>) -> tensor<2x256xi1>
      %28 = tt.broadcast %6 : (tensor<2x1xi1>) -> tensor<2x256xi1>
      %29 = arith.andi %27, %28 : tensor<2x256xi1> // xmask & rmask
      %c0_i32_5 = arith.constant 0 : i32 // other
      %cst_6 = arith.constant dense<0> : tensor<2x256xi32>
      %30 = arith.sitofp %cst_6 : tensor<2x256xi32> to tensor<2x256xf32>
      %31 = tt.load %26, %29, %30 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<2x256xf32>
      %32 = arith.addf %arg5, %31 : tensor<2x256xf32>
      %33 = tt.broadcast %6 : (tensor<2x1xi1>) -> tensor<2x256xi1>
      %34 = tt.broadcast %20 : (tensor<1x256xi1>) -> tensor<2x256xi1>
      %35 = arith.andi %33, %34 : tensor<2x256xi1>
      %36 = arith.select %35, %32, %arg5 : tensor<2x256xi1>, tensor<2x256xf32>
      scf.yield %36 : tensor<2x256xf32>
    }
    %14 = tt.call @sum__fp32S2_256S__1cconstexpr_1_(%13) : (tensor<2x256xf32>) -> tensor<2xf32>
    %15 = tt.expand_dims %14 {axis = 1 : i32} : (tensor<2xf32>) -> tensor<2x1xf32>
    %16 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<2x1x!tt.ptr<f32>>
    %17 = tt.addptr %16, %5 : tensor<2x1x!tt.ptr<f32>>, tensor<2x1xi32>
    tt.store %17, %15, %6 {cache = 1 : i32, evict = 1 : i32} : tensor<2x1xf32>
    tt.return
  }
  tt.func private @sum__fp32S2_256S__1cconstexpr_1_(%arg0: tensor<2x256xf32>) -> tensor<2xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32, %arg2: f32):
      %1 = tt.call @_sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32
      tt.reduce.return %1 : f32
    }) : (tensor<2x256xf32>) -> tensor<2xf32>
    tt.return %0 : tensor<2xf32>
  }
  tt.func private @_sum_combine__fp32_fp32__(%arg0: f32, %arg1: f32) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32
    tt.return %0 : f32
  }
}
